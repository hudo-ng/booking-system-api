generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(uuid())
  email                    String         @unique
  password                 String
  name                     String
  role                     Role
  createdAt                DateTime       @default(now())
  photo_url                String?
  start_price              Float?
  colour                   String?
  isAdmin                  Boolean        @default(true)
  phone_number             String         @default("111-111-1111")
  isOwner                  Boolean        @default(false)
  percentage_clean         Float?         @default(0)
  percentage_work          Float?         @default(0)
  percentage_shared        Float?         @default(0)
  wage                     Float?         @default(0)
  show_on_calendar_booking Boolean        @default(false)
  Appoinment               Appointment[]
  timeOff                  TimeOff[]
  WorkOverride             WorkOverride[]
  WorkSchedule             WorkSchedule[]
  WorkShift                WorkShift[]
  workingHours             WorkingHours[]
  Notification             Notification[]
  CleanSchedule            CleanSchedule[]
  slug String @unique
}

model CleanSchedule {
  id        String   @id @default(uuid())
  userId    String
  weekday   Int      // 0 = Sunday, 1 = Monday, ... 6 = Saturday
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, weekday]) // Ensure one record per day per user
}


model Appointment {
  id                     String                  @id @default(uuid())
  employeeId             String
  customerName           String
  email                  String
  phone                  String
  detail                 String
  status                 AppointmentStatus       @default(pending)
  startTime              DateTime?
  endTime                DateTime?
  createdAt              DateTime?               @default(now())
  address                String?
  dob                    DateTime?
  paidWith               String?
  deposit_amount         Float?
  deposit_category       String?
  extra_deposit_category String?
  quote_amount           Float?
  employee               User                    @relation(fields: [employeeId], references: [id])
  AppointmentAttachment  AppointmentAttachment[]
  AppointmentHistory     AppointmentHistory[]
}

model Notification {
  id                     String   @id @default(uuid())
  created_by             String
  created_at             DateTime @default(now()) @map("created_at")
  updated_at             DateTime @updatedAt @map("updated_at")
  description            String
  customer_name          String
  quote_amount           Float    @default(0)
  deposit_amount         Float    @default(0)
  deposit_category       String
  extra_deposit_category String?
  appointment_start_time DateTime
  appointment_end_time   DateTime
  title                  String?
  not_read               Boolean  @default(true)
  createdBy              User     @relation(fields: [created_by], references: [id])

  @@map("notifications")
}

model AppointmentAttachment {
  id            String      @id @default(uuid())
  appointmentId String
  fileId        String
  url           String
  mime          String
  size          Int
  width         Int?
  height        Int?
  createdAt     DateTime    @default(now())
  filename      String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model AppointmentHistory {
  id            String      @id @default(uuid())
  appointmentId String
  fieldChanged  String
  oldValue      String
  newValue      String
  changedAt     DateTime    @default(now())
  changedBy     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model WorkingHours {
  id             String  @id @default(uuid())
  employeeId     String
  weekday        Int
  startTime      String?
  endTime        String?
  intervalLength Int?
  type           String  @default("fixed")
  employee       User    @relation(fields: [employeeId], references: [id])

  @@index([employeeId, weekday], map: "employeeId_weekday")
}

model TimeOff {
  id         String   @id @default(uuid())
  employeeId String
  date       DateTime
  reason     String?
  employee   User     @relation(fields: [employeeId], references: [id])
}

model WorkSchedule {
  id        String   @id @default(uuid())
  userId    String
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model WorkShift {
  id        String    @id @default(uuid())
  userId    String
  clockIn   DateTime
  clockOut  DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model WorkOverride {
  id         String   @id @default(uuid())
  userId     String
  date       DateTime
  newEndTime DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, date], name: "userId_date")
}

enum AppointmentStatus {
  pending
  accepted
  declined
}

enum Role {
  admin
  employee
}
